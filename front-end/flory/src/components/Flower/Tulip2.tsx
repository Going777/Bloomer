/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/flowers/tulip2.gltf -t
*/

import * as THREE from "three";
import {
  useGLTF,
  PerspectiveCamera,
  OrthographicCamera,
} from "@react-three/drei";
import { GLTF } from "three-stdlib";
import React, { useRef } from "react";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Sphere002: THREE.Mesh;
    Sphere003: THREE.Mesh;
    Sphere004: THREE.Mesh;
    Cylinder: THREE.Mesh;
    Plane: THREE.Mesh;
    Plane001: THREE.Mesh;
    Sphere: THREE.Mesh;
    Sphere001: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/models/flowers/tulip2.gltf"
  ) as GLTFResult;

  const num = 6;

  // 회전 관련 함수
  const modelRef1 = useRef<any>();
  const modelRef2 = useRef<any>();
  const modelRef3 = useRef<any>();
  const modelRef4 = useRef<any>();
  const modelRef5 = useRef<any>();
  const modelRef6 = useRef<any>();
  const modelRef7 = useRef<any>();
  const modelRef8 = useRef<any>();
  useFrame(() => {
    modelRef1.current!.rotation.y += 0.01;
    modelRef2.current!.rotation.y += 0.01;
    modelRef3.current!.rotation.y += 0.01;
    modelRef4.current!.rotation.y += 0.01;
    // modelRef5.current!.rotation.y += 0.01;
    // modelRef6.current!.rotation.y += 0.01;
    modelRef7.current!.rotation.y += 0.01;
    modelRef8.current!.rotation.y += 0.01;
  });
  return (
    <group {...props} dispose={null}>
      <OrthographicCamera
        makeDefault={true}
        far={1000}
        near={0.1}
        // bottom={0}
        position={[30.37, 10.24 - num, 30.16]}
        rotation={[-0.79, 0.62, 0.52]}
        zoom={20}
      />
      <ambientLight intensity={0.5} />

      <pointLight
        intensity={2}
        decay={2}
        color="#ff6728"
        position={[0, -num, 0]}
        rotation={[-Math.PI / 2, 0, -Math.PI]}
      />
      <pointLight
        intensity={3}
        decay={2}
        color="green"
        position={[5, -10 - num, 3]}
        rotation={[-Math.PI / 2, 0, -Math.PI]}
      />
      <pointLight
        intensity={3}
        decay={2}
        color="red"
        position={[3.77, 9.82 - num, 5.77]}
        rotation={[-Math.PI / 2, 0, -Math.PI]}
      />
      <pointLight
        intensity={3}
        decay={2}
        color="red"
        position={[-3.77, 9.82 - num, -1.77]}
        rotation={[-Math.PI / 2, 0, -Math.PI]}
      />
      <pointLight
        intensity={3}
        decay={2}
        color="red"
        position={[3.14, 9.92 - num, -3.19]}
        rotation={[-Math.PI / 2, 0, -Math.PI]}
      />

      <mesh
        ref={modelRef1}
        geometry={nodes.Sphere002.geometry}
        material={materials["Material.001"]}
        position={[0.06, 7.37 - num, 0.13]}
        rotation={[0.04, 0.46, -0.11]}
        scale={[0.75, 1.12, 0.75]}
      />
      <mesh
        ref={modelRef2}
        geometry={nodes.Sphere003.geometry}
        material={materials["Material.001"]}
        position={[-0.06, 7.38 - num, 0.02]}
        rotation={[-3.06, -1.3, 3.08]}
        scale={[0.75, 1.12, 0.75]}
      />
      <mesh
        ref={modelRef3}
        geometry={nodes.Sphere004.geometry}
        material={materials["Material.001"]}
        position={[0.06, 7.37 - num, 0.03]}
        rotation={[-3.13, 0.54, -3.11]}
        scale={[0.75, 1.12, 0.75]}
      />
      <mesh
        ref={modelRef4}
        geometry={nodes.Cylinder.geometry}
        material={materials["Material.002"]}
        position={[0, 3.22 - num, 0]}
        scale={[0.11, 3.18, 0.11]}
      />
      <mesh
        ref={modelRef5}
        geometry={nodes.Plane.geometry}
        material={materials["Material.002"]}
        position={[-0.28, 2.96 - num, 0.76]}
        rotation={[1.89, 0.07, -3.06]}
        scale={[0.71, 0.71, 3.03]}
      />
      <mesh
        ref={modelRef6}
        geometry={nodes.Plane001.geometry}
        material={materials["Material.002"]}
        position={[-0.14, 2.32 - num, -0.61]}
        rotation={[1.25, 0.05, -0.28]}
        scale={[0.71, 0.69, 2.41]}
      />
      <mesh
        ref={modelRef7}
        geometry={nodes.Sphere.geometry}
        material={nodes.Sphere.material}
        position={[-0.01, 6.15 - num, 0]}
        rotation={[0, 0, -0.06]}
      />
      <mesh
        ref={modelRef8}
        geometry={nodes.Sphere001.geometry}
        material={materials["Material.001"]}
        position={[-0.01, 6.15 - num, 0]}
        rotation={[0, 0, -0.06]}
      />
    </group>
  );
}

// useGLTF.preload('/tulip2.gltf')

function Tulip2() {
  return (
    // object3D: 빈 지역 공간
    <Model />
  );
}

export default Tulip2;
